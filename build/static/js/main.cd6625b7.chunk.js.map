{"version":3,"sources":["Funnel.js","App.js","serviceWorker.js","index.js"],"names":["Funnel","data","style","width","height","pallette","monday","mondaySdk","App","props","apiCall","api","variables","boardIds","state","context","nameColumnId","settings","nameId","valueColumnId","valueId","then","res","setState","boardData","boards","items","map","item","name","column_values","type","text","value","calculatePercentage","errorVal","spinner","catch","err","console","log","refreshButton","percent","funnelData","total","Math","round","index","listen","className","this","Alert","variant","Spinner","animation","Button","onClick","size","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uWAceA,G,MAVA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACI,kBAAC,IAAD,CACIA,KAAMA,EACNC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,SAAY,CAAC,UAAW,UAAW,UAAW,UAAW,e,wBCA/DC,EAASC,MAiKAC,E,kDA9Jb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA2DRC,QAAU,WAYRJ,EACGK,IAZM,8QAYK,CACVC,UAAW,CACTC,SAAU,EAAKC,MAAMC,QAAQF,SAC7BG,aAAc,EAAKF,MAAMG,SAASC,OAClCC,cAAe,EAAKL,MAAMG,SAASG,WAGtCC,MAAK,SAACC,GACL,EAAKC,SAAS,CAAEC,UAAWF,EAAIrB,OAC/B,EAAKsB,SAAS,CACZtB,KAAM,EAAKa,MAAMU,UAAUC,OAAO,GAAGC,MAAMC,KAAI,SAACC,GAAD,MAAW,CACxDC,KACiC,SAA/BD,EAAKE,cAAc,GAAGC,KAClBH,EAAKE,cAAc,GAAGE,KACtBJ,EAAKE,cAAc,GAAGE,KAC5BC,MACiC,YAA/BL,EAAKE,cAAc,GAAGC,KAClBH,EAAKE,cAAc,GAAGE,KACtBJ,EAAKE,cAAc,GAAGE,WAGhC,EAAKE,oBAAoB,EAAKpB,MAAMb,MACpC,EAAKsB,SAAS,CAAEY,UAAU,IAC1B,EAAKZ,SAAS,CAAEa,SAAS,OAE1BC,OAAM,SAACC,GACN,EAAKf,SAAS,CAAEY,UAAU,IAC1BI,QAAQC,IAAIF,OApGC,EAwGnBG,cAAgB,WACd,EAAKlB,SAAS,CAAEa,SAAS,IACzB,EAAK1B,WA1GY,EA6GnBwB,oBAAsB,SAACjC,GACrB,EAAKsB,SAAS,CAAEmB,QAAS,KACzB,EAAKnB,SAAS,CAAEoB,WAAY,CAAC,MAC7B,IAAIC,EAAQ3C,EAAK,GAAGgC,MACN,IAAVW,IAIJ,EAAKrB,SAAS,CACZmB,QAASzC,EAAK0B,KAAI,SAACC,GAAD,OAAUiB,KAAKC,MAAOlB,EAAKK,MAAQW,EAAS,UAGhE,EAAKrB,SAAS,CACZoB,WAAY,EAAK7B,MAAMb,KAAK0B,KAAI,SAACC,EAAMmB,GAAP,MAAkB,CAChDlB,KAAK,GAAD,OAAKD,EAAKC,KAAV,aAAmB,EAAKf,MAAM4B,QAAQK,GAAtC,MACJd,MAAOL,EAAKK,cAxHhB,EAAKnB,MAAQ,CACXG,SAAU,CACRC,OAAQ,OACRE,QAAS,WAEXnB,KAAM,CACJ,CAAE4B,KAAM,YAAaI,MAAO,KAC5B,CAAEJ,KAAM,WAAYI,MAAO,KAC3B,CAAEJ,KAAM,gBAAiBI,MAAO,KAElCS,QAAS,GACTC,WAAY,CAAC,IACb5B,QAAS,GACTS,UAAW,GACXW,UAAU,EACVC,SAAS,GAnBM,E,gEAuBE,IAAD,OAsBlB9B,EAAO0C,OAAO,YAAY,SAAC1B,GACzB,EAAKC,SAAS,CAAEN,SAAUK,EAAIrB,OAEG,KAA/B,EAAKa,MAAMG,SAASC,QACY,KAAhC,EAAKJ,MAAMG,SAASG,SAEpB,EAAKV,aAITJ,EAAO0C,OAAO,WAAW,SAAC1B,GACxB,EAAKC,SAAS,CAAER,QAASO,EAAIrB,Y,+BA0E/B,OACE,yBAAKgD,UAAU,aACmB,KAA/BC,KAAKpC,MAAMG,SAASC,QAAiD,KAAhCgC,KAAKpC,MAAMG,SAASG,QACxD,yBAAK6B,UAAU,oBACb,sFAEwB,IAAxBC,KAAKpC,MAAMqB,SACb,kBAACgB,EAAA,EAAD,CAAOC,QAAQ,UAAf,wCAEA,yBAAKH,UAAU,yBACZC,KAAKpC,MAAMsB,QACV,kBAACiB,EAAA,EAAD,CAASC,UAAU,SAASF,QAAQ,YAEpC,kBAAC,EAAD,CAAQH,UAAU,OAAOhD,KAAMiD,KAAKpC,MAAM6B,aAE5C,yBAAKM,UAAU,QACb,kBAACM,EAAA,EAAD,CAAQC,QAASN,KAAKT,cAAeW,QAAQ,SAASK,KAAK,KAAKC,WAAUR,KAAKpC,MAAMsB,SAArF,kB,GAnJIuB,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdrC,OAAM,SAAAsC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.cd6625b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FunnelChart } from 'react-funnel-pipeline';\r\nimport 'react-funnel-pipeline/dist/index.css';\r\n\r\nconst Funnel = ({ data }) => {\r\n    return (\r\n        <FunnelChart\r\n            data={data}\r\n            style={{ width: '100%', height: '100%'}}\r\n            pallette = {['#3b7dd8', '#4a91f2', '#64a1f4', '#8dbdff', '#bfd6f6']}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Funnel;","import React, { useMemo } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport Funnel from \"./Funnel\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {\n        nameId: \"text\",\n        valueId: \"numbers\",\n      },\n      data: [\n        { name: \"Awareness\", value: 252 },\n        { name: \"Interest\", value: 105 },\n        { name: \"Consideration\", value: 84 },\n      ],\n      percent: [],\n      funnelData: [{}],\n      context: {},\n      boardData: {},\n      errorVal: false,\n      spinner: true\n    };\n  }\n\n  componentDidMount() {\n    // monday.listen(\"settings\", res => {\n    //   this.setState({ settings: res.data });\n\n    //   this.setState(prevState => ({\n    //     data: [\n    //       {\n    //         name: this.state.settings.nameOne ? this.state.settings.nameOne : prevState.data[0].name,\n    //         value: this.state.settings.valueOne ? this.state.settings.valueOne : prevState.data[0].value\n    //       },\n    //       {\n    //         name: this.state.settings.nameTwo ? this.state.settings.nameTwo : prevState.data[1].name,\n    //         value: this.state.settings.valueTwo ? this.state.settings.valueTwo : prevState.data[1].value\n    //       },\n    //       {\n    //         name: this.state.settings.nameThree ? this.state.settings.nameThree : prevState.data[2].name,\n    //         value: this.state.settings.valueThree ? this.state.settings.valueThree : prevState.data[2].value\n    //       },\n    //     ]\n    //   }));\n    //   this.calculatePercentage(this.state.data);\n    // });\n    monday.listen(\"settings\", (res) => {\n      this.setState({ settings: res.data });\n      if (\n        this.state.settings.nameId !== \"\" &&\n        this.state.settings.valueId !== \"\"\n      ) {\n        this.apiCall();\n      }\n    });\n\n    monday.listen(\"context\", (res) => {\n      this.setState({ context: res.data });\n    });\n  }\n\n  apiCall = () => {\n    let query = `query ($boardIds: [Int], $nameColumnId: String!, $valueColumnId: String! ) {\n      boards (ids:$boardIds) {\n        items {\n          column_values(ids:[$nameColumnId, $valueColumnId]) {\n            text\n            type\n          }\n        } \n      } \n    }`;\n\n    monday\n      .api(query, {\n        variables: {\n          boardIds: this.state.context.boardIds,\n          nameColumnId: this.state.settings.nameId,\n          valueColumnId: this.state.settings.valueId,\n        },\n      })\n      .then((res) => {\n        this.setState({ boardData: res.data });\n        this.setState({\n          data: this.state.boardData.boards[0].items.map((item) => ({\n            name:\n              item.column_values[0].type === \"text\"\n                ? item.column_values[0].text\n                : item.column_values[1].text,\n            value:\n              item.column_values[1].type === \"numeric\"\n                ? item.column_values[1].text\n                : item.column_values[0].text,\n          })),\n        });\n        this.calculatePercentage(this.state.data);\n        this.setState({ errorVal: false });\n        this.setState({ spinner: false })\n      })\n      .catch((err) => {\n        this.setState({ errorVal: true });\n        console.log(err);\n      });\n  };\n\n  refreshButton = () => {\n    this.setState({ spinner: true })\n    this.apiCall();\n  };\n\n  calculatePercentage = (data) => {\n    this.setState({ percent: [] });\n    this.setState({ funnelData: [{}] });\n    var total = data[0].value;\n    if (total === 0) {\n      return;\n    }\n\n    this.setState({\n      percent: data.map((item) => Math.round((item.value / total) * 100)),\n    });\n\n    this.setState({\n      funnelData: this.state.data.map((item, index) => ({\n        name: `${item.name} (${this.state.percent[index]}%)`,\n        value: item.value,\n      })),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.settings.nameId === \"\" || this.state.settings.valueId === \"\" ? (\n          <div className=\"pt-4 text-center\">\n            <p>Please enter the id of label column and value column.</p>\n          </div>\n        ) : this.state.errorVal === true ? (\n          <Alert variant=\"danger\"> The name or the value is incorrect </Alert>\n        ) : (\n          <div className=\"funnel_container pt-4\">\n            {this.state.spinner ? (\n              <Spinner animation=\"border\" variant=\"primary\" />\n            ) : (\n              <Funnel className=\"pt-4\" data={this.state.funnelData} />\n            )}\n            <div className=\"pt-4\">\n              <Button onClick={this.refreshButton} variant=\"danger\" size=\"lg\" disabled={this.state.spinner? true : false}>\n                Refresh\n              </Button>\n            </div>\n          </div>\n        )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}